<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HH的奇妙空间</title>
  
  
  <link href="https://blog.himehina.space/atom.xml" rel="self"/>
  
  <link href="https://blog.himehina.space/"/>
  <updated>2020-11-29T18:11:24.247Z</updated>
  <id>https://blog.himehina.space/</id>
  
  <author>
    <name>HimeHina</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于本站的诞生</title>
    <link href="https://blog.himehina.space/uncategorized/80751380dcf5.html"/>
    <id>https://blog.himehina.space/uncategorized/80751380dcf5.html</id>
    <published>2020-11-22T14:02:54.000Z</published>
    <updated>2020-11-29T18:11:24.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创-站-记">创 站 记</h2><p> 起初, 神创造天地.</p><p> 地是空虚混沌. 渊面黑暗. 神的灵运行在水面上.</p><p> 神说, 要有光, 于是有了本站.(?)</p><h2 id="缘由">缘由</h2><p> 每次遇到问题都得上<em>Bing</em>或<em>Google</em>找解决方案, 之后再遇到忘记了又得重新找, 很浪费时间. 其次, 我想整个学习计算机相关知识的笔记, 最好能方便查找. 那就干脆整个博客来记录好了. 感觉写博客对学习到的知识应该会有更好的理解, 因为这得向别人讲明白这是什么那是什么. 同时, 还能分享交流. 当然, 前提是有人看......</p><h2 id="框架的选择">框架的选择</h2><a id="more"></a><p> 这里选择用 <em><a href="https://hexo.io/">Hexo 5.2.0</a></em> 来作为博客的框架. 主要是方便, 还不用买服务器, 只要买个域名, 再部署到<em>GitHub Pages</em>或腾讯的<em>Coding</em>, 一个看起来还不错的博客就建好了. 虽然<em>Hexo</em>只是一个静态博客框架, 效果功能可能没那些动态网页好, 但对我来说足够了.</p><h2 id="搭建过程">搭建过程</h2><ol type="1"><li><h3 id="环境准备">环境准备</h3><p> 首先得安装这两个程序:</p><ul><li><em><a href="https://nodejs.org">Node.js</a></em></li><li><em><a href="https://git-scm.com/">Git</a></em></li></ul><p> 在命令行里输入命令, 查看安装版本. 验证是否安装成功.</p><pre><code> git --version node -v npm -v</code></pre><p> 我们可以更换npm的源到国内, 加快安装. 这里使用淘宝镜像.</p><pre><code> npm config set https://registry.npm.taobao.org</code></pre><p> 然后在命令行里安装<em>Hexo</em>.</p><pre><code> npm install -g hexo-cli</code></pre><p> 初始化<em>Hexo</em>, 这里将在<code>HH_blog</code>文件夹里存放hexo相关的文件夹.</p><pre><code>hexo init HH_Blog </code></pre><p> 进入文件夹<code>HH_Blog</code>, 并安装相关依赖.</p><pre><code> cd HH_Blog npm install</code></pre><p> 至此, 基本的安装就完成了. 输入以下命令把博客部署在本地. 用浏览器访问<a href="http://127.0.0.1:4000" class="uri">http://127.0.0.1:4000</a>, 就能看到博客主页了, 稍后会提到如何部署在云端.</p><pre><code> hexo generate hexo server</code></pre><p><strong>注:</strong> <code>hexo generate</code>可以简写为<code>hexo g</code>. 只要不引起歧义, 就只需要输入部分字符. 其他命令使用方法通过<code>hexo help</code>查看.</p></li><li><h3 id="在github和coding上创建仓库">在<em>GitHub</em>和<em>Coding</em>上创建仓库</h3><p> 为了博客能被别人看到, 我们可以选择部署到<em>GitHub Pages</em>和<em>Coding</em>. 它们都可以免费部署静态网站, 如果没有太高的要求, 完全是够用的. <em>GitHub</em>是在中国境外的, 可能访问会很慢, 但它是完全免费的, 可以长期部署. <em>Coding</em>是腾讯旗下的类似<em>GitHub</em>的代码托管平台. 用它部署的静态网站在国内访问速度要更快, 但是好像免费期只有6个月, 过期后得续费.</p><p> 在这里, 我选择双线部署, <em>GitHub</em>用于境外访问, 而<em>Coding</em>用于境内.</p><hr /><p> 这里假定你已经注册好了<em>GitHub</em>账号. 然后创建新仓库, 如下图. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/Github%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="Github创建仓库" />  由于我已经建好了仓库, 这里显示仓库已存在. 注意, 仓库名应该是<code>你的用户名.github.io</code></p><p> 对于<em>Coding</em>是类似的操作. 浏览器打开<a href="https://coding.net" class="uri">https://coding.net</a>, 注册好后登录. 在<strong><code>项目</code></strong>栏下新建项目. 第一次创建会强制让你建立引导项目, 创建完删了再新建一个就是.</p><p> 如图, <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="Coding创建项目" /></p><p> 选择第一个模板. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF.png" alt="Coding选择项目模板" /></p><p> 随便填. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E5%A1%AB%E5%86%99%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF.png" alt="Coding填写项目信息" /></p><p> 随后进入代码仓库, 创建新的Git代码仓库. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E6%96%B0%E5%BB%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93.png" alt="Coding新建代码仓库" /></p><p> 选择Git仓库, 可以把代码扫描关了, 好像要人民币. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E4%BF%A1%E6%81%AF.png" alt="Coding代码仓库信息" /></p><p> 仓库建完了. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B5%8F%E8%A7%88.png" alt="Coding代码仓库代码浏览" /></p></li><li><h3 id="添加ssh-key">添加<em>SSH Key</em></h3><p> 在<em>GitHub</em>和<em>Coding</em>上添加<em>SSH Key</em>能方便我们把本地博客上传到云端.</p><p> 首先要在本地生成<em>SSH Key</em>. 在命令行内输入:</p><pre><code> git config --global user.name &quot;GitHub用户名&quot; git config --global user.email &quot;GitHub注册邮箱&quot; ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</code></pre><p> 然后一路回车就行, 保持默认. 然后在用户目录下的<code>.ssh/</code>目录下生成了两个文件: <code>id_rsa</code>和<code>id_rsa.pub</code>. 我们只需要<code>id_rsa.pub</code>文件的内容.</p><p> 进入<em>GitHub</em>的<em>Settings</em>界面. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Github%E9%85%8D%E7%BD%AESSH.png" alt="Github配置SSH" /></p><p> 添加<em>SSH Key</em> <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Github%E6%B7%BB%E5%8A%A0SSH_Key.png" alt="Github添加SSH_Key" /></p><p> 标题随便填, 在<em>Key</em>栏填入<code>id_rsa.pub</code>文件内的东西. 然后就添加成功了. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Github%E6%B7%BB%E5%8A%A0SSH_Key%E6%95%88%E6%9E%9C.png" alt="Github添加SSH_Key效果" /></p><p> 对于<em>Coding</em>的设置, 只需在个人设置的<code>SSH公钥</code>里添加<code>id_rsa.pub</code>的内容即可. <img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E6%B7%BB%E5%8A%A0SSH_Key.png" alt="Coding添加SSH_Key" /></p><p> 让我们测试一下, 是否可用.</p><pre><code> $ ssh -T git@github.com   Hi Hime-Hina! You&#39;ve successfully authenticated, but GitHub does not provide shell access. $ ssh -T git@e.coding.net   CODING 提示: Hello Hime-Hina, You&#39;ve connected to coding.net via SSH. This is a Personal Key.   Hime-Hina，你好，你已经通过 SSH 协议认证 coding.net 服务，这是一个个人公钥.   公钥指纹：49:9f:93:3c:68:48:92:29:9b:72:17:32:78:f9:ef:cc</code></pre><p> 成功的话, 应该输出上面的提示.</p></li><li><h3 id="上传博客">上传博客</h3><p> 打开本地<em>Hexo</em>配置文件<code>_config.yml</code>, 也就是根目录下的那个. 将文件最后的<code>deploy:</code>的部分修改为:</p><pre><code> deploy:   type: &#39;git&#39;   repository:      coding: &#39;git@e.coding.net:hime-hina/hime-hina/HH_Blog.git&#39;     github: &#39;git@github.com:Hime-Hina/hime-hina.github.io.git&#39;   branch: &#39;master&#39;</code></pre><p><strong>注意</strong>:</p><ul><li>冒号<code>:</code>后应该有一个空格分隔键值.</li><li><code>coding:</code>和<code>github:</code>后面应该是仓库的<em>SSH</em>地址, 可以在仓库页面的克隆(<em>Clone</em>)处找到.</li><li>现在, 在<em>GitHub</em>新建仓库的默认分支(<em>Branch</em>)名已经改为<code>main</code>. 由于还不知道如何分别到推送到两个不同平台的不同分支, 这里先统一分支名为<code>master</code>. 可以在推送之后手动把<code>master</code>设为默认, 然后删除<code>main</code>分支.</li></ul><p> 为了<em>Hexo</em>能够用<em>Git</em>推送到仓库, 我们还要安装插件.</p><pre><code> npm install hexo-deployer-git --save</code></pre><p> 先用命令<code>hexo generate</code>来构建静态网站, 然后用命令<code>hexo deploy</code>来将博客上传到远程仓库.</p></li><li><h3 id="部署博客for-coding">部署博客(<em>For CODING</em>)</h3><p> 上传完博客, <em>GitHub Pages</em>应该已经能够访问了, 访问<code>[你的GitHub用户名].github.io</code>即可. 上传到仓库后, 对于<em>Coding</em>还需要一个步骤. 进入项目, 进入<code>持续部署</code>--&gt;<code>静态网站</code>.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2.png" alt="" /><figcaption>Coding静态网站部署</figcaption></figure><p> 需要实名认证, 然后新建静态网站.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E6%96%B0%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99.png" alt="" /><figcaption>Coding新建静态网站</figcaption></figure><p> 网站名称随意, 网站类型选静态网站, 其他保持默认就好. 之后要配置自定义域名, 若节点选择在境内是需要备案的. 这里为了方便, 先使用香港节点, 不用备案.  等待网站自动部署好后, 可以通过自动分配的域名访问, 接下来介绍如何配置自定义域名.</p></li><li><h3 id="配置自定义域名">配置自定义域名</h3><p> 首先得拥有一个域名, 可以到<a href="https://www.aliyun.com/">阿里云</a>或<a href="https://cloud.tencent.com/">腾讯云</a>上购买, 通常是很便宜的, 200元人民币不到就可以买到一个10年拥有权的域名.</p><p> 先配置<em>Coding</em>的, 进入<code>项目</code>--&gt;<code>持续部署</code>--&gt;<code>静态网站</code>, 选择自定义域名.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E8%BF%9B%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%A1%B5%E9%9D%A2.png" alt="" /><figcaption>Coding进入自定义域名页面</figcaption></figure><p> 新建域名, 输入你自己购买的. 前缀是随意的, 它是主机记录, 之后在域名控制台解析的时候保持一致就行.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Coding%E6%96%B0%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.png" alt="" /><figcaption>Coding新建自定义域名</figcaption></figure><p> 这里为了其他人用浏览器访问时不会报安全问题, 可以申请SSL证书, 然后开启HTTPS. 具体流程在新建自定义域名时会有.</p><p> 然后, 我们需要在控制台解析这个网址. 进入控制台, 添加记录.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Aliyun%E6%B7%BB%E5%8A%A0Coding%E8%AE%B0%E5%BD%95.png" alt="" /><figcaption>Aliyun添加Coding记录</figcaption></figure><p> 记录类型是CNAME, 表示该域名指向另一个域名. 主机记录与之前在<em>Coding</em>填的保持一致. 记录值填在<em>Coding</em>新建域名时分配给你的域名. 这个过程可以参考<em>Coding</em>的文档.</p><p> 添加结果如下. 然后就能通过自己的域名访问了.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Aliyun%E6%B7%BB%E5%8A%A0Coding%E5%9F%9F%E5%90%8D%E7%BB%93%E6%9E%9C.png" alt="" /><figcaption>Aliyun添加Coding域名结果</figcaption></figure><p> <em>GitHub</em>的设置比较简单. 进入仓库的<em>Settings</em>.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/GitHub%E8%BF%9B%E5%85%A5Settings.png" alt="" /><figcaption>GitHub进入Settings</figcaption></figure><p> 找到<em>GitHub Pages</em>一栏. 把<em>Custom Domain</em>改为自己的域名, 同样可以选择强制开启HTTPS.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/GitHub%E8%AE%BE%E7%BD%AECustom_Domain.png" alt="" /><figcaption>GitHub设置Custom_Domain</figcaption></figure><p> 然后在命令行内博客根目录的<code>source</code>文件夹, 新建文件<code>CNAME</code>, 添加内容为之前<em>Custom Domain</em>填写的域名.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/GitHub%E4%BF%AE%E6%94%B9CNAME.png" alt="" /><figcaption>GitHub修改CNAME</figcaption></figure><p> 重新把博客上传.</p><pre><code> hexo clean hexo g hexo d</code></pre><p> 在域名控制台添加解析记录是与之前一样的, 记录值是<code>[你的GitHub用户名].github.io</code>. 效果如下.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/Aliyun%E6%B7%BB%E5%8A%A0Github%E8%A7%A3%E6%9E%90.png" alt="" /><figcaption>Aliyun添加Github解析</figcaption></figure><p> 在这里, 我把<em>GitHub Pages</em>解析线路设置为境外, 这样在国外访问的就是<em>GitHub</em>端的, 国内访问的是<em>Coding</em>端的.</p><p> 至此, 应该能用自己的域名来访问博客了.</p></li><li><h3 id="发布新文章">发布新文章</h3><p> <em>Hexo</em>默认是用<em>Markdown</em>来解析文章. 可以安装插件来支持其他的语言. 可以看看<a href="https://markdown.com.cn/">Markdown语法教程</a>来快速入门.</p><p> 输入<code>hexo new post [文章标题]</code>来创建新的文章. 用命令<code>hexo s</code>来本地预览博客. 它会直接在主页显示.</p><p> 命令<code>hexo new draft [草稿]</code>用来创建草稿, 它不会直接在主页显示. 如果草稿不再草了, 可以用<code>hexo publish [草稿]</code>来把草稿转为文章.</p></li></ol><h2 id="更进一步">更进一步</h2><ol type="1"><li><h3 id="更换主题">更换主题</h3><p> 默认的主题是<code>landscape</code>, 不是很好看, 我们可以把博客的主题更换. <a href="https://github.com/next-theme/hexo-theme-next">NexT</a> 是一个可以高度个性化的主题, 对新人来说配置也很方便.</p><p> 先进入博客根目录. <em>Hexo</em>的版本在5.0以上, 可以直接用<code>npm</code>安装.</p><pre><code> npm install hexo-theme-next</code></pre><p> 也可以直接把仓库克隆到本地.</p><pre><code> git clone https://github.com/next-theme/hexo-theme-next themes/next</code></pre><p> 完事后, 编辑本地<code>_config.yml</code>文件. 找到<code>theme: landscape</code>部分, 改为<code>theme: next</code>. 这样主题就更换好了. 重新构建, 输入<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>, 可以看到更换后的结果.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/%E9%A6%96%E6%AC%A1%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98.png" alt="" /><figcaption>首次更换NexT主题</figcaption></figure></li><li><h3 id="更改配置文件">更改配置文件</h3><p> 我们可以尝试更改配置文件<code>_config.yml</code>来使博客更加个性化. 需要注意的是NexT主题有自己的<code>_config.yml</code>, 在<code>themes/next/</code>下, 与根目录的站点配置文件是不一样的, 需要区分. 实际上, 对于<em>Hexo</em> 5.0 以上的版本, 我们可以使用<code>_config.[theme].yml</code>来作为主题配置文件, 这样就可以在博客根目录下存放. 因此, 我们可以把<code>themes/next/_config.yml</code>复制到根目录下.</p><pre><code> cp .\themes\next\_config.yml _config.next.yml</code></pre><p> 这样, 我们就可以用根目录下的配置文件, 而不需要更改主题目录下的配置了, 方便了管理. 其实, 还可以把主题配置搬到站点配置文件里, 在站点配置文件里添加一个字典类型, 键是<code>theme_config</code>, 值是相应的配置. 但是我感觉把主题配置塞到站点配置有点臃肿, 就不采取这个方法了.</p><p> 另外, <em>Hexo</em>在合并主题配置时, <code>theme_config</code>的优先级最高, 其次是<code>_config.[theme].yml</code>, 最后是主题目录下的<code>_config.yml</code>.</p><hr /><ol type="i"><li><h4 id="更改站点配置">更改站点配置</h4></li></ol><p> 接下来, 更改站点配置文件<code>_config.yml</code>.</p><pre><code> # Site title: &#39;网站名称&#39; subtitle: &#39;子名称/标题&#39; description: &#39;网站描述&#39; keywords: &#39;网站的关键词&#39; author: &#39;文章的默认作者&#39; language: &#39;zh-CN&#39; timezone: &#39;时区&#39;</code></pre><p> <code>description</code>主要用于告诉搜索引擎这个站点的描述, NexT主题也可以显示. <code>keywords</code>网站的关键词, 建议在<code>description</code>里包含它. <code>language</code>网站使用的语言, 在所使用的主题的根目录的<code>languages</code>文件夹下可以找到支持的语言文件, 这里要对应起来. <code>timezone</code>是时区, 中国大陆地区用<code>Asia/Shanghai</code>.</p><pre><code> # URL ## If your site is put in a subdirectory, set url as &#39;http://example.com/child&#39; and root as &#39;/child/&#39; url: https://domain.com root: / permalink: :category/:hash.html permalink_defaults: pretty_urls:   trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks   trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</code></pre><p> <code>url</code>一般填自己网站的链接, 必须以<code>https://</code>或<code>http://</code>开头.<code>root</code>是网站的根目录. 如果网站的存放在子目录, 如<code>http://domain.com/blog</code>, 应该将<code>url</code>设置为<code>http://domain.com/blog</code>, 并且<code>root</code>设置为<code>/blog/</code>. <code>permalink</code>永久链接的格式, 该例子生成的永久链接是<code>https://domain.com/[文章的分类]/[文章标题的SHA1值和日期的16进制值].html</code> 关于其他变量设置, 参考<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a>.</p><pre><code> # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render:   - README.md   - CNAME</code></pre><p> 这一块内容定义了本地根目录下文件夹存储的内容. <code>source_dir</code>是资源文件夹, 用来存放内容. <code>public_dir</code>是公共文件夹, 用来存放<em>Hexo</em>生成的静态网站文件. <code>hexo deploy</code>将会把这个文件夹的所有内容上传. <code>skip_render</code>定义了让<em>Hexo</em>跳过渲染的文件, 匹配的文件将不做改动地复制到<code>public_dir</code>. 这些参数一般不需要改动, 具体可参考<a href="https://hexo.io/zh-cn/docs/configuration#%E7%9B%AE%E5%BD%95">目录</a>.</p><p> <code># Writing</code>比较长, 这里用表格解释.</p><table><colgroup><col style="width: 16%" /><col style="width: 83%" /></colgroup><thead><tr class="header"><th style="text-align: center;">参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>new_post_name</code></td><td>新文章的文件名, 默认为<em>Markdown</em>文件, 以标题为文件名.</td></tr><tr class="even"><td style="text-align: center;"><code>default_layout</code></td><td>默认布局, 在创建新文章时, 如<code>hexo new [layout] [文章]</code>, 没有指定<code>[layout]</code>就默认是<code>post</code>. 也可以把值设置成<code>draft</code>, 这样默认的新文章就是草稿.</td></tr><tr class="odd"><td style="text-align: center;"><code>titlecase</code></td><td>是否把标题转换为<em>title case</em>, 就是英文里标题的首字母大写, 对中文没啥用吧.</td></tr><tr class="even"><td style="text-align: center;"><code>external_link.enable</code></td><td>是否在新标签页打开链接</td></tr><tr class="odd"><td style="text-align: center;"><code>external_link.field</code></td><td>对整个网站生效设置为<code>site</code>, 仅对文章生效设置为<code>post</code>.</td></tr><tr class="even"><td style="text-align: center;"><code>external_link.exclude</code></td><td>需要排除的域名.</td></tr><tr class="odd"><td style="text-align: center;"><code>filename_case</code></td><td>把文件名转换为(<code>1</code>)小写或(<code>2</code>)大写.</td></tr><tr class="even"><td style="text-align: center;"><code>render_drafts</code></td><td>是否显示草稿.</td></tr><tr class="odd"><td style="text-align: center;"><code>future</code></td><td>官方文档说是"显示未来的文章", 不太明白.</td></tr><tr class="even"><td style="text-align: center;"><code>highlight</code></td><td>代码块的高亮显示设置. 如果不使用<code>prism.js</code>保持默认就行.</td></tr><tr class="odd"><td style="text-align: center;"><code>prismjs</code></td><td>与<code>highlight.js</code>类似, 也是用于代码块高亮. <code>prism.js</code>似乎效果更好, 之后我们会启用它.</td></tr></tbody></table><pre><code> # Home page setting # path: Root path for your blogs index page. (default = &#39;&#39;) # per_page: Posts displayed per page. (0 = disable pagination) # order_by: Posts order. (Order by date descending by default) index_generator:   path: &#39;&#39;   per_page: 12   order_by: -date ... # Pagination ## Set per_page to 0 to disable pagination per_page: 12 pagination_dir: page</code></pre><p> 这里是定义了博客的分页规则, <code>per_page</code>定义每页有几篇文章, 据说改为6的倍数效果更好.</p><ol start="2" type="i"><li><h4 id="修改-site-information-settings">修改 <strong><em>Site Information Settings</em></strong></h4></li></ol><p> 接下来, 编辑<code>_config.next.yml</code>. 在<code>Site Information Settings</code>下, 可以看到有<code>favicon</code>, 它是设置网站图标的, 图标会显示在浏览器的标签上.</p><pre><code> favicon:   small: /images/favicon-16x16-next.png   medium: /images/favicon-32x32-next.png   apple_touch_icon: /images/apple-touch-icon-next.png   safari_pinned_tab: /images/logo.svg   #android_manifest: /images/manifest.json   #ms_browserconfig: /images/browserconfig.xml</code></pre><p><code>images</code>文件夹是在主题文件夹下的, 可以选择在根目录的<code>source</code>文件夹下新建<code>uploads</code>文件夹来代替, 方便管理.</p><p> 还有一个<code>footer</code>参数, 用来设置网站底部信息的显示.</p><pre><code> footer:   # Specify the date when the site was setup. If not defined, current year will be used.   since: 2020   # Icon between year and copyright info.   icon:     # Icon name in Font Awesome. See: https://fontawesome.com/icons     name: fa fa-heartbeat     # If you want to animate the icon, set it to true.     animated: true     # Change the color of icon, using Hex Code.     color: &quot;#ff77ff&quot;   # If not defined, `author` from Hexo `_config.yml` will be used.   copyright:   # Powered by Hexo &amp; NexT   powered: true</code></pre><p> <code>since</code>显示建站的年份. <code>icon</code>是设置图标, <code>icon.name</code>定义了<code>icon</code>的图标. <code>icon.animated</code>则设置图标是不是动态的. <code>color</code>设置图标的 <em><font color = red>R</font><font color = green>G</font><font color = blue>B</font></em> 颜色, 具体效果见下图. <code>powered</code>的效果同样在图中.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/%E7%BD%91%E7%AB%99Footer%E6%95%88%E6%9E%9C.png" alt="" /><figcaption>网站Footer效果</figcaption></figure><p> 如果<code>author</code>已经设置了, <code>copyright</code>保持默认即可. 本来<code>footer</code>里还有个<code>beian</code>的设置, 但是我还没备案, 就先略过.</p><p> <code>Site Information Settings</code>还可以设置网站显示知识共享协议. 按照下面的参数配置即可.</p><pre><code> creative_commons:   license: by-nc-sa   sidebar: true   post: true   language: deed.zh</code></pre><p> <code>license</code>可以是<code>by</code>, <code>nc</code>, <code>sa</code>的组合.</p><p> <code>by</code>: 署名(<em>Attribution</em>), 他人复制, 传播, 展示和演出作品, 必须保留姓名标示.</p><p> <code>nc</code>: 不可商用(<em>Non-Commercial</em>).</p><p> <code>sa</code>: 相同方式分享(<em>Share Alike</em>). 允许修改作品, 但必须使用相同的许可证发布.</p><p> <code>sidebar</code>设置为<code>true</code>, 许可证将显示在侧边栏.</p><ol start="3" type="i"><li><h4 id="修改-scheme-settings">修改 <strong><em>Scheme Settings</em></strong></h4></li></ol><p> 接下来是<code>Scheme Settings</code>, 可以自己尝试修改查看效果, 不多说了. 图来自<a href="https://theme-next.js.org/docs/">NexT官方文档</a>.</p><figure><img src="https://image-host-1257208881.file.myqcloud.com/_posts/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/NexT%E7%9A%84Scheme_Settings.png" alt="" /><figcaption>Scheme Settings</figcaption></figure><p>我选择使用<em>Gemini</em>, 接下来都是以这个风格为主, 不同的风格有些设置不支持, 具体可以在主题配置里查看.</p><ol start="4" type="i"><li><h4 id="修改-menu-settings">修改 <strong><em>Menu Settings</em></strong></h4></li></ol><p> 在<code>Menu Settings</code>里, 把一些注释去掉, 这会在侧边栏添加一些新页面的入口.</p><pre><code> menu:   home: / || fa fa-home   about: /about/ || fa fa-user   tags: /tags/ || fa fa-tags   categories: /categories/ || fa fa-th   archives: /archives/ || fa fa-archive   schedule: /schedule/ || fa fa-calendar   #sitemap: /sitemap.xml || fa fa-sitemap   #commonweal: /404/ || fa fa-heartbeat menu_settings:   icons: true   badges: true</code></pre><p> <code>menu_settins.icons</code>设置是否显示相应入口的图标. <code>menu_settings.badges</code>设置是否显示对应页面的文章数量.</p><p> 你能在文章顶部的左边看到对应设置的显示效果.</p><p><!-- TODO: 404页面 -->  这样设置仅仅只有入口, 页面还是没有创建的(除了<code>archives</code>页面, 它是<em>NexT</em>主题默认就有的), 如果直接访问会显示<code>Cannot Get [...]</code>(由于404页面没有配置, 它是不会显示<code>404 Not Found</code>的. 后面会配置<code>menu.commonweal</code>选项.). 因此, 要新建页面, 在命令行下输入:</p><pre><code> hexo new page about hexo new page tags hexo new page categories hexo new page schedule</code></pre><p> 然后, 只要编辑<code>source/[页面名]/index.md</code>就能修改对应页面的内容.</p><ol start="22" type="a"><li><h4 id="修改-siderbar-settings">修改 <strong><em>Siderbar Settings</em></strong></h4></li></ol><p> 接下来是<code>Sidebar Settings</code>.  <code>sidebar</code>似乎没啥要改的, 可以忽略, 有需要可以看注释, 根据需要修改.</p><p> 我们可以修改<code>avatar</code>, 来在侧边栏显示头像.</p><pre><code> avatar:   url: /uploads/HIMEHINA.jpg   rounded: true   rotated: true</code></pre><p> <code>url</code>改成头像图片的相对位置. 可以把头像文件存放在<code>[站点根目录]/source/images</code>里. 或者存放在<code>themes/next/source/images</code>文件夹里.</p><p> <code>rounded</code>设置头像是否要用圆形边框.</p><p> <code>rotated</code>设置鼠标悬停在头像上时, 是否旋转.</p><p> 接下来的<code>site_state</code>设置侧边栏是否显示<code>文章/分类/标签</code>的信息.</p><p> 下面是设置社交账号的显示.</p><pre><code> social:   GitHub: https://github.com/Hime-Hina || fab fa-github   E-Mail: mailto:1545340072@qq.com || fa fa-envelope   V2EX: https://www.v2ex.com/?r=HimeHina || </code></pre><p> 每一对键值的组成是<code>[社交账号的名称]: [链接] || [图标]</code>. <code>[链接]</code>填社交账号主页的链接. <code>[图标]</code>写在<code>||</code>后, 这里使用了 <a href = "https://fontawesome.com/" class = "faa-parent animated-hover"> <i class="fab fa-font-awesome-flag faa-horizontal faa-slow"></i> Font Awesome </a> 的图标库.</p><p> 你可以在左边的<strong>站点概览</strong>里看看效果.</p><hr /><p>(未完待续...)</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;创-站-记&quot;&gt;创 站 记&lt;/h2&gt;
&lt;p&gt; 起初, 神创造天地.&lt;/p&gt;
&lt;p&gt; 地是空虚混沌. 渊面黑暗. 神的灵运行在水面上.&lt;/p&gt;
&lt;p&gt; 神说, 要有光, 于是有了本站.(?)&lt;/p&gt;
&lt;h2 id=&quot;缘由&quot;&gt;缘由&lt;/h2&gt;
&lt;p&gt; 每次遇到问题都得上&lt;em&gt;Bing&lt;/em&gt;或&lt;em&gt;Google&lt;/em&gt;找解决方案, 之后再遇到忘记了又得重新找, 很浪费时间. 其次, 我想整个学习计算机相关知识的笔记, 最好能方便查找. 那就干脆整个博客来记录好了. 感觉写博客对学习到的知识应该会有更好的理解, 因为这得向别人讲明白这是什么那是什么. 同时, 还能分享交流. 当然, 前提是有人看......&lt;/p&gt;
&lt;h2 id=&quot;框架的选择&quot;&gt;框架的选择&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>测试!!!</title>
    <link href="https://blog.himehina.space/uncategorized/5a657cb01b65.html"/>
    <id>https://blog.himehina.space/uncategorized/5a657cb01b65.html</id>
    <published>2020-11-20T15:42:24.000Z</published>
    <updated>2020-11-29T18:12:20.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大标题">大标题</h2><h2 id="你好">你好</h2><p> 这是测试文章.</p><blockquote><p>我大意了啊, 没有闪. ---- 混元形意太极门掌门人 🐎🎳🍎</p></blockquote><h2 id="老三样">老三样</h2><ul><li>左正蹬</li><li>右鞭腿</li><li>左刺拳</li></ul><h2 id="名-人-名-言">名 人 名 言</h2><ul><li><p>欸, 朋友们好. 我是混元形意太极门掌门人, 🐎🎳🍎.</p></li><li><p>刚才有个朋友问我, "马老师发生甚么事了". 我说: "怎么回事?" 给我发了几张截图. 我一看. 嗷! 源赖氏佐田, 有两个黏青人, 30多岁, 一个体重90多公斤, 一个体重80多公斤.</p></li><li><p>塔门说, 诶......有一个说是我在健身房练功, 颈椎练坏了, 马老师你能不能教教我混元功法? 诶......帮助治疗一下, 我的颈椎病.</p></li></ul><h2 id="整点代码">整点代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">l = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">101</span>)]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> l:</span><br><span class="line">  <span class="built_in">sum</span> += x;</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h2 id="测试mathjax渲染latex">测试<span class="math inline">\(MathJax\)</span>渲染<span class="math inline">\(\LaTeX\)</span></h2><p><span class="math display">\[\begin{align*}  \int 🐎\, d🐎 &amp;= \frac{1}{2}🐎^2 + C \\  \int\frac{1}{🎳}\, d🎳 &amp;=\ln\left| 🎳 \right| + C \\  \frac{\mathrm{d} \sin\left(🍎\right)}{\mathrm{d} 🍎} &amp;= \cos(🍎)\end{align*}\]</span></p><h2 id="测试font-awesome和iconfont">测试<em>Font Awesome</em>和<em>Iconfont</em></h2><svg class="icon faa-spin animated" aria-hidden="true"><use xlink:href="#icon-qq"></use></svg><svg class="icon faa-bounce animated" aria-hidden="true"><use xlink:href="#icon-bilibili"></use></svg><h2 id="测试note">测试<em>Note</em></h2><div class="note default">            <p>this is a note.</p>          </div><div class="note success">            <p>you succeed in finding me.</p>          </div><h2 id="测试tabs和label">测试<em>Tabs</em>和<em>Label</em></h2><span class="label success">Successful Label</span><div class="tabs" id="fucking-tabs"><ul class="nav-tabs"><li class="tab active"><a href="#fucking-tabs-1">Fucking Tabs 1</a></li><li class="tab"><a href="#fucking-tabs-2">Fucking Tabs 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fucking-tabs-1"><p>Awwwww.</p><div id="sub-tabs" class="tabs"><ul class="nav-tabs"><li class="tab active"><a href="#sub-tabs-1">Sub Tabs 1</a></li><li class="tab"><a href="#sub-tabs-2">Sub Tabs 2</a></li></ul><div class="tab-content"><div id="sub-tabs-1" class="tab-pane active"><p>Awww.</p><div id="sub-sub-tabs" class="tabs"><ul class="nav-tabs"><li class="tab active"><a href="#sub-sub-tabs-1"><span class="label danger">fuckyou</span></a></li><li class="tab"><a href="#sub-sub-tabs-2">Sub Sub Tabs 2</a></li></ul><div class="tab-content"><div id="sub-sub-tabs-1" class="tab-pane active"><p>Aw.</p></div><div id="sub-sub-tabs-2" class="tab-pane"><p>Ah.</p></div></div></div></div><div id="sub-tabs-2" class="tab-pane"><p>Ahhh.</p></div></div></div></div><div class="tab-pane" id="fucking-tabs-2"><p>Ahhhhh.</p></div></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
</feed>
